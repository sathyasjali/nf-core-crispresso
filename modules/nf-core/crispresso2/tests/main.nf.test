nextflow_process {
    name "Test Process CRISPRESSO2"
    script "../main.nf"
    process "CRISPRESSO2"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "crispresso2"

    test("crispresso2 - paired end") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                input[1] = "TCCCATCACATCAACCGGTGGCGCATTGCCACGAAGCAGGCCAATGGGGAGGACATCGATGTCACCTCCAATGACTAGGGTGGGCAACCGGTTGTAACGAAGGTGTGAAGCTGAGCTG"
                input[2] = "GGCGCATTGCCACGAAGCAG"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("crispresso2 - single end") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = "TCCCATCACATCAACCGGTGGCGCATTGCCACGAAGCAGGCCAATGGGGAGGACATCGATGTCACCTCCAATGACTAGGGTGGGCAACCGGTTGTAACGAAGGTGTGAAGCTGAGCTG"
                input[2] = "GGCGCATTGCCACGAAGCAG"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
